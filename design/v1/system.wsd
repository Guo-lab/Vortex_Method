@startuml
skinparam monochrome true
left to right direction
skinparam classAttributeIconSize 0

package "Core Simulation" {

  class Particle {
    -m_x: array<double, DIM>
    -strength: double
    +increment()
  }

  class DX {
    -m_x: array<double, DIM>
    +DX()
    +increment()
    +operator*=()
  }

  class ParticleSet {
    -m_particles: vector<Particle>
    -m_hockney: Hockney
    -m_dx: double
    -m_box: DBox
    -m_lowCorner: double[DIM]
    +ParticleSet()
    +ParticleSet()
    +increment()
    +getSize()
    +getParticle()
    +resize()
    +reserve()
    +addParticle()
    +addParticle()
    +getH()
  }

  class ParticleShift {
    -m_particles: vector<DX>
    +ParticleShift()
    +init()
    +increment()
    +operator*=()
    +setToZero()
    +getShift()
    +getSize()
  }

  class ParticleVelocities {
    +ParticleVelocities()
    +operator()()
    +computeDisplacementIncrement()
    +computeDisplacementIncrement_detailed_v0()
  }

  class RK4<X, F, dX> {
    -m_k: dX
    -m_delta: dX
    -m_f: F
    +advance()
  }

  class Hockney {
    -m_h: double
    -m_M: int
    -m_N: int
    -m_fftmd: FFTMD
    -m_kerPtr: shared_ptr<ConvKernel>
    -m_isDefined: bool
    +Hockney()
    +Hockney()
    +define()
    +validateInputDomain()
    +createExpandedDomain()
    +prepareComplexArrays()
    +performFFTOperations()
    +convolve()
    +isDefined()
    +getM()
    +getN()
    +getH()
    +getKernel()
  }

  abstract class ConvKernel {
    +getKernel() {abstract}
  }

  class CutoffKernel {
    -m_h: double
    -m_delta: double
    +CutoffKernel()
    +CutoffKernel()
    +getKernel()
  }

  class DBox {
    -m_lowCorner: Point
    -m_highCorner: Point
    -m_size: unsigned int
    +DBox()
    +DBox()
    +DBox()
    +operator&()
    +operator&=()
    +shift()
    +shift()
    +grow()
    +grow()
    +coarsen()
    +coarsen()
    +refine()
    +refine()
    +getLowCorner()
    +getHighCorner()
    +sizeOf()
    +contains()
    +contains()
    +mod()
    +getIndex()
    +getPoint()
    +increment()
    +isEmpty()
  }

  class Point {
    -m_tuple: array<int, DIM>
    +Point()
    +Point()
    +Point()
    +Point()
    +operator<()
    +operator+()
    +operator-()
    +operator*()
    +operator/()
    +operator*()
    +operator/()
    +operator+=()
    +operator-=()
    +operator*=()
    +operator/=()
    +operator==()
    +operator!=()
    +operator[]()
    +print()
    +print_raw()
  }

  class RectMDArray<T> {
    -m_data: T*
    -m_box: DBox
    -m_size: unsigned int
    +RectMDArray()
    +RectMDArray()
    +setVal()
    +operator[]()
    +getDBox()
  }

  class FFTMD {
    -m_N: int
    -m_M: int
    -m_fft1dPtr: shared_ptr<FFT1D>
    +FFTMD()
    +FFTMD()
    +define()
    +forwardCC()
    +inverseCC()
    +forwardCCcen()
    +inverseCCcen()
    +getN()
    +getM()
    +isDefined()
  }

  abstract class FFT1D {
    -m_M: unsigned int
    -m_N: unsigned int
    +FFT1D()
    +FFT1D()
    +forwardFFTCC() {abstract}
    +inverseFFTCC() {abstract}
    +getN()
    +getM()
  }

  class FFTW1D {
    -m_in: vector<complex<double>>
    -m_out: vector<complex<double>>
    -m_forward: fftw_plan
    -m_inverse: fftw_plan
    +FFTW1D()
    +forwardFFTCC()
    +inverseFFTCC()
  }

}

' Relationships
ParticleSet o--> "many" Particle : contains
ParticleSet o--> Hockney : contains
ParticleShift o--> "many" DX : contains
Hockney o--> ConvKernel : uses
Hockney o--> FFTMD : uses
CutoffKernel -|> ConvKernel : inherits
FFTW1D -|> FFT1D : inherits
FFTMD o--> FFT1D : uses
ParticleVelocities --> ParticleSet : uses
ParticleVelocities --> ParticleShift : uses
ParticleVelocities --> RectMDArray : uses
RK4 --> ParticleSet : uses
RK4 --> ParticleVelocities : uses
RK4 --> ParticleShift : uses
DBox --> Point : uses
RectMDArray --> DBox : uses
Hockney --> RectMDArray : uses
FFTMD --> RectMDArray : uses
FFTMD --> DBox : uses
Particle --> DX : uses
ParticleSet --> DBox : uses

' Template instantiation
note right of RK4
  Instantiated as:
  RK4<ParticleSet, ParticleVelocities, ParticleShift>
end note

@enduml