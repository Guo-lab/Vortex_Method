@startuml Project_Class_Diagram

' Use left to right layout for wider diagrams
left to right direction


' Core simulation classes
class ParticleSet {
  +vector<Particle> m_particles
  +double m_dx
  +Box m_box
  +double m_lowCorner[DIM]
  +Hockney m_hockney
  +ParticleSet()
  +ParticleSet(shared_ptr<ConvKernel>, Box&, double&, array<Real, DIM>&, int)
  +increment(const ParticleShift&)
}

class ParticleVelocities {
  +ParticleVelocities()
  +operator()(ParticleShift&, const double&, const double&, ParticleSet&)
}

class "RK4<X, F, dX>" as RK4 {
  -dX m_k
  -dX m_delta
  -F m_f
  +advance(double, double, X&)
}

class Particle {
  +array<double, DIM> m_x
  +double strength
  +increment(const DX&)
}

class DX {
  +array<double, DIM> m_x
  +increment(double, const DX&)
  +operator*=(double)
}

class ParticleShift {
  +vector<DX> m_particles
  +init(const ParticleSet&)
  +increment(double, const ParticleShift&)
  +operator*=(double)
  +setToZero()
}

' Hockney solver and related classes
class Hockney {
  -double m_h
  -int m_M, m_N
  -FFTMD m_fftmd
  -shared_ptr<ConvKernel> m_kerPtr
  -bool m_isDefined
  +Hockney()
  +Hockney(shared_ptr<ConvKernel>&, const double&, int)
  +define(shared_ptr<ConvKernel>&, const double&, int)
  +convolve(RectMDArray<double>&)
}

abstract class ConvKernel {
  +getKernel(RectMDArray<complex<double>>&, double&)
}

class CutoffKernel {
  -double m_h
  -double m_delta
  +CutoffKernel()
  +CutoffKernel(double&, double)
  +getKernel(RectMDArray<complex<double>>&, double&)
}

' FFT classes
class FFTMD {
  -int m_N
  -int m_M
  -shared_ptr<FFT1D> m_fft1dPtr
  +FFTMD()
  +FFTMD(shared_ptr<FFT1D>)
  +define(shared_ptr<FFT1D>)
  +forwardCC(RectMDArray<complex<double>>&)
  +inverseCC(RectMDArray<complex<double>>&)
  +forwardCCcen(RectMDArray<complex<double>>&)
  +inverseCCcen(RectMDArray<complex<double>>&)
}

abstract class FFT1D {
  #unsigned int m_M, m_N
  +FFT1D()
  +FFT1D(unsigned int)
  +forwardFFTCC(vector<complex<double>>&, vector<complex<double>>&)
  +inverseFFTCC(vector<complex<double>>&, vector<complex<double>>&)
}

class FFTW1D {
  +FFTW1D(const unsigned int&)
  +forwardFFTCC(vector<complex<double>>&, vector<complex<double>>&)
  +inverseFFTCC(vector<complex<double>>&, vector<complex<double>>&)
}

class FFT1DBRI {
  +FFT1DBRI(const unsigned int&)
  +forwardFFTCC(vector<complex<double>>&, vector<complex<double>>&)
  +inverseFFTCC(vector<complex<double>>&, vector<complex<double>>&)
}

class FFT1DRecursive {
  +FFT1DRecursive(const unsigned int&)
  +forwardFFTCC(vector<complex<double>>&, vector<complex<double>>&)
  +inverseFFTCC(vector<complex<double>>&, vector<complex<double>>&)
}

' Array and spatial classes
class "RectMDArray<T>" as RectMDArray {
  -vector<T> m_data
  -DBox m_domain
  +RectMDArray()
  +RectMDArray(const DBox&)
  +operator[](const Point&)
  +getBox()
  +getDBox()
  +setVal(const T&)
}

class DBox {
  -Point m_lo
  -Point m_hi
  +DBox()
  +DBox(const Point&, const Point&)
  +DBox(const int*, const int*)
  +getLowCorner()
  +getHighCorner()
  +grow(int)
  +contains(const Point&)
  +notDone(const Point&)
  +increment(Point&)
}

class Point {
  -int m_tuple[DIM]
  +Point()
  +Point(const int*)
  +operator[](unsigned int)
  +operator+(const Point&)
  +operator-(const Point&)
}

' Output and visualization
class WriteRectMDArray {
  +MDWrite(const char*, RectMDArray<double>&)
}

class VisitWriter {
  +PWrite(ParticleSet*)
}

' Main test/driver class
class VortexTest {
  +outField(ParticleSet&, int)
  +main(int, char**)
}

' Relationships
ParticleSet *-- "many" Particle : contains
ParticleSet *-- "1" Hockney : contains
RK4 ..> ParticleSet : operates on
RK4 ..> ParticleVelocities : uses as F
RK4 ..> ParticleShift : uses as dX
ParticleShift *-- "many" DX : contains
ParticleVelocities ..> ParticleSet : accesses
ParticleVelocities ..> ParticleShift : modifies
Particle ..> DX : uses

Hockney *-- "1" FFTMD : contains
Hockney *-- "1" ConvKernel : contains
ConvKernel <|-- CutoffKernel : implements

FFTMD *-- "1" FFT1D : contains
FFT1D <|-- FFTW1D : implements
FFT1D <|-- FFT1DBRI : implements
FFT1D <|-- FFT1DRecursive : implements

RectMDArray *-- "1" DBox : contains
DBox *-- "2" Point : contains

VortexTest ..> ParticleSet : creates
VortexTest ..> RK4 : creates
VortexTest ..> WriteRectMDArray : uses
VortexTest ..> VisitWriter : uses

@enduml